#' @title 
#' Identifies putative priming regulatory factor pairs
#' 
#' @aliases FindPrimingFactors
#'  
#' @description 
#' If priming is present (as evaluated using \code{CompPrimingPval} function), then
#' one wishes to find the regulatory factors driving such priming. This function ranks
#' regulatory factors and regulatory factor pairs according to their likelihood of being
#' involved in priming.
#' 
#' 
#' @param data.m
#' The input data matrix, representing the normalized gene expression data matrix
#' over regulatory factors (rows) and single cells (columns).
#' 
#' @param type1fth
#' The threshold on the frequency of expression among multipotent cells
#' for a RF to be considered for priming analysis (type-1). Only RFs with
#' a frequency less than this threshold will be taken forward. The default
#' value NULL uses as threshold the mean frequency over all RFs.
#'
#' 
#' @return A list of four elements:
#' 
#' @return rankedLOO
#' A vector of regulatory factors ranked in decreasing order of priming potential
#'
#' @return rankedPairs
#' A table ranking the most likely pairs of regulatory factors involved in priming,
#' with 1st column labeling the Spearman Rank Correlation and 2nd column labeling the
#' corresponding P-value.
#'
#' @return fexpr
#' A vector listing the frequency of expression of the type1 RFs in the multipotent
#' cell population.
#'
#' @return type1fth
#' The frequency threshold used for RFs to be taken forward for priming analysis.
#' 
#' @references 
#' Qi Luo, Alok K Maity, Andrew E Teschendorff
#' \emph{Distance Covariance Entropy reveals primed states and bifurcation dynamics in single-cell RNA-Seq data}
#' Submitted.
#' 
#' 
#' @examples 
#'
#' 
#' @import corpcor
#' 
#' 
#' @export
#'
FindPrimingFactors <- function(data.m, type1fth=NULL){

  ### first select type-1 RFs
  fexpr.v <- apply(data.m,1,fExpr);
  if(is.null(type1fth)){
    type1fth <- mean(fexpr.v);      
  }
  type1.idx <- which(fexpr.v < type1fth);

  data1.m <- data.m[type1.idx,];    
  diceObs <- CompDICE(data1.m)$dice;
  fexpr1.v <- fexpr.v[type1.idx];

  diceRmO.v <- vector();
  print("Doing perturbation LOO DICE analysis");
  for(rf in 1:nrow(data1.m)){
    tmp.idx <- setdiff(1:nrow(data1.m),rf);
    diceRmO.v[rf] <- CompDICE(data1.m[tmp.idx,])$dice;
  }
  names(diceRmO.v) <- rownames(data1.m);
  dDice.v <- diceRmO.v - diceObs;
  tmp.s <- sort(dDice.v,decreasing=TRUE,index.return=TRUE);
  

  print("Doing Spearman analysis");
  npairs <- 0.5*nrow(data1.m)*(nrow(data1.m)-1);
  tab.m <- matrix(nrow=npairs,ncol=2);
  colnames(tab.m) <- c("SCC","P");
  tmp.v <- vector();
  ii <- 1;    
  for(tf1 in 1:(nrow(data1.m)-1)){
   for(tf2 in (tf1+1):nrow(data1.m)){
       ct.o <- suppressWarnings(cor.test(data1.m[tf1,],data1.m[tf2,],method="spearman"));
       tab.m[ii,1:2] <- c(ct.o$est,ct.o$p.value);
       tmp.v[ii] <- paste(rownames(data1.m)[tf1],":",rownames(data1.m)[tf2],sep="");
       ii <- ii+1;
   }
  }
  rownames(tab.m) <- tmp.v;
  tab.s <- sort(tab.m[,1],decreasing=TRUE,index.return=TRUE);

  return(list(rankedLOO=names(dDice.v)[tmp.s$ix],rankedPairs=tab.m[tab.s$ix,],fexpr=fexpr1.v[tmp.s$ix],type1fth=type1fth));

}

### Auxiliary Functions
#' 
#' 
fExpr <- function(v,th=0){
    f <- length(which(v > th))/length(v);
    return(f);
}
